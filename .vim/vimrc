" =====================================
" Vim Plug
" =====================================
"
call plug#begin('~/.vim/plugged')

" FIND SLOWING PLUGIN

" NOT OK
  " at one point if this was on relative line numbers will give massive lags might aswell correlate to italic font?
  Plug 'othree/yajs.vim'

" OK
  Plug 'pangloss/vim-javascript'
  Plug 'jelera/vim-javascript-syntax'
  Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'othree/jspc.vim'
  Plug '1995eaton/vim-better-javascript-completion'
  Plug 'leafgarland/typescript-vim'
  Plug 'mxw/vim-jsx'
  " Plug 'w0rp/ale'
  Plug 'terryma/vim-smooth-scroll'
  Plug 'roxma/nvim-completion-manager'
  Plug 'roxma/nvim-cm-tern',  {'do': 'npm install'}
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }
  Plug 'scrooloose/nerdtree'
  Plug 'easymotion/vim-easymotion'
  Plug 'Yggdroot/indentLine'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'LS8/vim-quantum'
  Plug 'tpope/vim-commentary'
  Plug 'itchyny/lightline.vim'
  Plug 'hail2u/vim-css3-syntax'
  Plug 'ryanoasis/vim-devicons'
  Plug 'Raimondi/delimitMate'
  " Plug 'ternjs/tern_for_vim', { 'for': ['javascript', 'javascript.jsx'] }
  " Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'javascript.jsx'] }
  " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  " L9 Library (Dependency for Autocomplpop)
    " Plug 'eparreno/vim-l9'
  " Auto pop up completion suggestions
    " Plug 'othree/vim-autocomplpop'
  " Vim Snippets
    " Plug 'MarcWeber/vim-addon-mw-utils'
    " Plug 'tomtom/tlib_vim'
    " Plug 'garbas/vim-snipmate'
    " Plug 'honza/vim-snippets'
  " Cycle through Yanks with Meta+p
    " Plug 'maxbrunsfeld/vim-yankstack'
  " Pug Syntax
    " Plug 'digitaltoad/vim-pug'
call plug#end()

" =====================================
" End Vim Plug
" =====================================

" =====================================
" General
" =====================================
  " Keybindings
    let mapleader = "\<Space>" 
  " Save File
    " nnoremap <Leader>w :w<CR>
    nnoremap <Leader>fs :w<CR>
  " Alias Q as q to quit file
    :command Q q
    nnoremap <Leader>Q :q<CR>
    nnoremap <Leader>x :q!<CR>
    nnoremap <Leader>q :q<CR>
    nnoremap <Leader>bd :bp<bar>sp<bar>bn<bar>bd<CR> 
    nnoremap <Leader><CR> <Esc>A;<Esc>^
    nnoremap \\ :noh<return>

    " nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
    " nmap <silent> <Leader>en <Plug>(ale_next_wrap)
    " let g:ale_javascript_eslint_use_global = 1
    " let g:ale_lint_on_text_changed = 'never'

  " Alternate buffers / windows
    nnoremap <Leader><Tab> <C-^>
    nnoremap <Leader>wk <C-W>k
    nnoremap <Leader>wl <C-W>l
    nnoremap <Leader>wj <C-W>j
    nnoremap <Leader>wh <C-W>h
    nnoremap <Leader>wm <C-W>o
    nnoremap <Leader>ww <C-W>p
    nnoremap <Leader>wd <C-W>q

    " nnoremap <Leader>ws :new<CR>
    " nnoremap <Leader>wv :vne<CR>
    nnoremap <Leader>ws :split<CR>
    nnoremap <Leader>wv :vsplit<CR>

  " Open terminal at the bottom
    nnoremap <Leader>' :below 5sp term://$SHELL<cr>i

  " Fuzzy File Finder (Ctrl P)
    nnoremap <Leader>pf :CtrlP<CR>
    nnoremap <Leader>bf :CtrlPBuffer<CR>
    nnoremap <Leader>bb :CtrlPMixed<CR>
    nnoremap <Leader>ff :CtrlPMixed<CR>
  " Find file literally in current folder (folder of the currently opened file)
    nnoremap <Leader>fl :e <C-R>=expand('%:p:h') . '/'<CR>
  " Cycle Suggestions
    inoremap <expr> <C-J> ((pumvisible())?("\<C-n>"):("J"))
    inoremap <expr> <C-K> ((pumvisible())?("\<C-p>"):("K"))

  " Show relative line numbers
    set relativenumber

    set hidden

  " Auto-indent new lines
    set autoindent
  " Tabs And Space Setting
    set expandtab
    set shiftwidth=2
    set smartindent 
    set smarttab
    set softtabstop=2

  " Search Setting
    set hlsearch
    set smartcase
    set ignorecase
    set incsearch

" =====================================
" End General
" =====================================

" =====================================
" Plug in settings & customization
" =====================================
"
" Omnicomplete
" =====================================

  let g:jsx_ext_required = 0

  filetype plugin on
  set omnifunc=syntaxcomplete#Complete
  autocmd FileType javascript setlocal omnifunc=tern#Complete 
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS

  au FileType javascript,jsx,javascript.jsx setl omnifunc=tern#Complete
  set completeopt=longest,menuone,preview
  " autocmd CompleteDone * pclose
  " disable tern preview
  set completeopt-=preview

" Lightline
" =====================================
  function! LightLineFilename()
    return expand('%')
  endfunction

  " get rid of default vim mode information
  set noshowmode

  set laststatus=2
  if !has('gui_running')
      set t_Co=256
    endif

  let g:lightline = {
      \ 'colorscheme': 'Dracula',
      \ 'component_function': {
      \   'filename': 'LightLineFilename'
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }
  " let g:lightline = {
  "     \ 'colorscheme': 'wombat',
  "     \ 'component': {
  "     \   'readonly': '%{&readonly?"":""}',
  "     \ },
  "     \ 'separator': { 'left': '', 'right': '' },
  "     \ 'subseparator': { 'left': '', 'right': '' }
  "     \ }

  " Match statusline bg with terminal bg
  let s:palette = g:lightline#colorscheme#{g:lightline.colorscheme}#palette
  let s:palette.normal.middle = [ [ 'NONE', 'NONE', 'NONE', 'NONE' ] ]
  let s:palette.inactive.middle = s:palette.normal.middle
  let s:palette.tabline.middle = s:palette.normal.middle


" Colorscheme Settings
" =====================================
  set background=dark
  colorscheme quantum
  let g:quantum_italics=1
  let g:quantum_black = 1
  hi Normal ctermbg=none

" Other
" =====================================
  " let g:ctrlp_prompt_mappings = {
  "   \ 'AcceptSelection("e")': ['<c-t>'],
  "   \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
  "   \ }
  let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
\ }
  " Open files
  " map <Leader>e :edit <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>
  " map <Leader>t :tabedit <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>
  " map <Leader>s :sp <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
  " map <Leader>v :vsp <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
  " Tab Navigation
  " nnoremap <Leader>h  :tabfirst<CR>
  " nnoremap <Leader>j  :tabnext<CR>
  " nnoremap <Leader>k  :tabprev<CR>
  " nnoremap <Leader>l  :tablast<CR>
  " nnoremap <Leader>x  :q<CR>
  " nnoremap <Leader>q  :q<CR>
  " nnoremap <Leader>o  <C-W>w

  " AutoExpand brackets and alike (delimitMate)
  let delimitMate_expand_cr = 1

  " Set timeout to avoid delay on e.g 'O'
  :set timeout timeoutlen=3000 ttimeoutlen=100

  " Deactivate auto commention if opening new line from commented line
  autocmd BufNewFile,BufRead * setlocal formatoptions-=cro

  " Cycle through Yanks with Meta+(shift)+p
  " nmap <leader>p <Plug>yankstack_substitute_older_paste
  " nmap <leader>P <Plug>yankstack_substitute_newer_paste
" =====================================
" End Plug in settings & customization
" =====================================



" =====================================
" Experimental
" =====================================
  set number
  let g:indentLine_color_term = 239
  let g:indentLine_char = '│'
  let g:indentLine_leadingSpaceEnabled=1
  let g:indentLine_leadingSpaceChar = '.'
  map <F7> :NERDTreeToggle<CR>
  map <leader>ft :NERDTreeToggle<CR>
  let g:NERDTreeDirArrowExpandable = '▸'
  let g:NERDTreeDirArrowCollapsible = '▾'
  let NERDTreeMapOpenVSplit = 'v'
  let NERDTreeMapOpenSplit = 's'
  " enable line numbers
  let NERDTreeShowLineNumbers=1
  " make sure relative line numbers are used
  autocmd FileType nerdtree setlocal relativenumber

  " map <Leader>ts :split term://zsh<CR>
  " map <Leader>tv :vsplit term://zsh<CR>
  " map <Leader>tt :tabedit term://zsh<CR>
  tnoremap <Esc> <C-\><C-n>

  let g:vim_json_syntax_conceal = 0
  set conceallevel=0
  autocmd FileType json let g:indentLine_setConceal = 0

  " colorscheme railscasts colorscheme mango colorscheme flatcolor colorscheme last256 hi MatchParen cterm=bold ctermbg=none  ctermfg=magenta highlight LineNr ctermfg=238 highlight Statement ctermfg=032 hi jsFuncCall ctermfg=031 hi jsFuncName ctermfg=158 hi jsFuncBlock ctermfg=015 hi jsOperator ctermfg=015 hi jsGlobalObjects ctermfg=175 hi jsFuncCall            guifg=NONE   guibg=203   gui=BOLD

" leader+sp to find term for color changing
" nmap <leader>sp :call <SID>SynStack()<CR>
" function! <SID>SynStack()
"   if !exists("*synstack")
"     return
"   endif
"   echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
" endfunc
" =====================================
" End Experimental
" =====================================


" =====================================
" Nerdtree Icons
" =====================================
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'blue', 'none', 'blue', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')


" let g:jsx_ext_required = 0
set mouse=a
set scrolloff=5
highlight Comment cterm=italic
" set t_ZH=[3m
" set t_ZR=[23m
set re=1
set lazyredraw
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 1)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 1)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 1)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 1)<CR>
